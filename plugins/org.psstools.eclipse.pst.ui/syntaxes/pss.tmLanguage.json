{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "portable-stimulus",
	"patterns": [
		{
			"include": "#keywords"
		},
		{
			"include": "#comments"
		},
		{
			"include": "#exec"
		},
		{
			"include": "#operators"
		},
		{
			"include": "#paths"
		},
		{
			"include": "#strings"
		}
	],
	"repository": {
		"keywords": {
			"patterns": [
				{
					"include": "#storage"
				},
				{
					"include": "#constants"
				},
				{
					"include": "#constraints"
				},
				{
					"include": "#control"
				},
				{
					"include": "#coverage"
				},
				{
					"include": "#activity"
				},
				{
					"include": "#import"
				},
				{
					"include": "#statements"
				}
			]
		},
		"strings": {
			"patterns": [
				{
					"name": "string.quoted.triple.pss",
					"begin": "\"\"\"",
					"end": "\"\"\"",
					"patterns": [
						{
							"name": "constant.character.escape.pss",
							"match": "\\\\."
						}
					]
				},
				{
					"name": "string.quoted.double.pss",
					"begin": "\"",
					"end": "\"",
					"patterns": [
						{
							"name": "constant.character.escape.pss",
							"match": "\\\\."
						}
					]
				}
			]
		},
		"activity": {
			"patterns": [
				{
					"name": "keyword.control.activity.pss",
					"match": "\\b(parallel|sequence|match|default|while|repeat|foreach|replicate|with|do|select|schedule)\\b"
				},
				{
					"name": "keyword.other.activity.pss",
					"match": "\\b(activity)\\b"
				},
				{
					"name": "keyword.other.join.pss",
					"match": "\\b(join_branch|join_select|join_none|join_first)\\b"
				}
			]
		},
		"comments": {
			"patterns": [
				{
					"name": "comment.line.double-slash.pss",
					"begin": "\\/\\/",
					"end": "$",
					"patterns": [{ "include": "#FIXME-TODO-XXX"}]
				},
				{
					"name": "comment.block.pss",
					"begin": "\\/\\*",
					"end": "\\*\\/",
					"patterns": [{ "include": "#FIXME-TODO-XXX"}]
				}
			]
		},
		"constants": {
			"patterns": [
				{
					"name": "constant.language.pss",
					"match": "\\b(true|false)\\b"
				},
				{
					"name": "constant.numeric.decimal",
					"match": "\\b(\\d[\\d.]*)\\b"
				}
			]
		},
		"constraints": {
			"patterns": [
				{
					"name": "keyword.other.constraint.pss",
					"match": "\\b(constraint|dynamic|unique|forall)\\b"
				}
			]
		},
		"control": {
			"patterns": [
				{
					"name": "keyword.control.pss",
					"match": "\\b(return|if|else|break|continue|super)\\b"
				}

			]
		},
		"coverage": {
			"patterns": [
				{
					"name": "keyword.other.coverage.pss",
					"match": "\\b(covergroup|coverpoint|cross)\\b"
				},
				{
					"name":  "keyword.control.coverage.pss",
					"match": "\\b(bins|ignore_bins|illegal_bins)\\b"
				}
			]
		},
		"FIXME-TODO-XXX": {
			"patterns": [
				{
					"name": "invalid.other.fixmes.pss",
					"match": "(?i:fixme)"
				},
				{
					"name": "keyword.other.fixmes.pss",
					"match": "(?i:todo|xxx)"

				}
			]
		},
		"exec": {
			"patterns": [
				{
					"begin": "\\b(exec)\\s*\\b(\\w+)\\s*\\b(sv|SV|systemverilog)\\b\\s*=",
					"contentName": "meta.other.exec.block.sv.pss",
					"end": "\\s*;",
					"beginCaptures": {
						"1": { "name": "keyword.other.exec.pss"},
						"2": { "name": "support.constant.exec.pss"}
					},
					"patterns": [
						{
							"include": "#exec-strings-sv"
						}
					]
				},
				{
					"begin": "\\b(exec)\\s*\\b(\\w+)\\s*\\b(c|C)\\b\\s*=",
					"contentName": "meta.other.exec.block.c.pss",
					"end": "\\s*;",
					"beginCaptures": {
						"1": { "name": "keyword.other.exec.pss"},
						"2": { "name": "support.constant.exec.pss"}
					},
					"patterns": [
						{
							"include": "#exec-strings-c"
						}
					]
				},
				{
					"name": "keyword.other.exec.pss",
					"match": "\\b(exec)\\b"
				},
				{
					"name": "support.constant.exec.pss",
					"match": "\\b(declaration|file|header|run_start|run_end|pre_solve|post_solve|body)\\b"
				}
			]
		},
		"exec-strings-c": {
			"patterns": [
				{
					"name": "exec.triplequote.c",
					"begin": "\"\"\"",
					"contentName": "meta.embedded.block.c",
					"end": "\"\"\"",
					"patterns": [
						{
							"include": "source.c"
						}
					]
				},
				{
					"name": "exec.doublequote.c",
					"begin": "\"",
					"contentName": "meta.embedded.block.c",
					"end": "\"",
					"patterns": [
						{
							"include": "source.c"
						}
					]
				}
			]
		},
		"exec-strings-sv": {
			"patterns": [
				{
					"name": "exec.triplequote.sv",
					"begin": "\"\"\"",
					"contentName": "meta.embedded.block.sv",
					"end": "\"\"\"",
					"patterns": [
						{
							"include": "text.systemverilog"
						}
					]
				},
				{
					"name": "exec.doublequote.sv",
					"begin": "\"",
					"contentName": "meta.embedded.block.sv",
					"end": "\"",
					"patterns": [
						{
							"include": "text.systemverilog"
						}
					]
				}
			]
		},
		"import": {
			"patterns": [
				{
					"match": "\\b(import|typedef)\\b",
					"name": "keyword.control.misc.sv"
				}
			]

		},
		"operators": {
			"patterns": [
				{
					"name": "keyword.operator.assignment.pss",
					"match": "\\+=|\\-=|<<=|>>=|\\|=|&=|="
				},
				{
					"name": "keyword.operator.arithmetic.pss",
					"match": "\\+|\\-|\\*|%|/|\\*\\*"
				},
				{
					"name": "keyword.operator.relation.pss",
					"match": "<|>|<=|>="
				},
				{
					"name": "keyword.operator.equality.pss",
					"match": "==|!="
				},
				{
					"name": "keyword.operator.conditional.pss",
					"match": "\\?"
				},
				{
					"name": "keyword.operator.logical.pss",
					"match": "!|&&|\\|\\|"
				}
				
			]
		},
		"paths": {
			"patterns": [
				{
					"name": "meta.inst.package.pss",
					"match": "(\\w+)(::)",
					"captures": {
						"1": { "name": "entity.name.type.pss" },
						"2": { "name": "keyword.operator.pss" }
					}
				}
			]
		},
		"statements": {
			"patterns": [
				{
					"name": "keyword.other.bind.pss",
					"match": "\\b(bind)\\b"
				}

			]
		},
		"storage": {
			"patterns": [
				{
					"name": "storage.type.data.pss",
					"match": "\\b(int|bit|bool|string|chandle)\\b"
				},
				{
					"name": "storage.modifier.pss",
					"match": "\\b(input|output|inout|static|const|(in|out)put|inout|lock|share|pool|abstract)\\b"
				},
				{
					"name": "storage.modifier.other.pss",
					"match": "\\b(rand|private|public|protected)\\b"
				},
				{
					"name": "storage.type.pss",
					"match": "\\b(action|component|package|struct|enum|resource|buffer|stream|state|function)\\b"
				},
				{
					"name": "support.class.collections.pss",
					"match": "\\b(array|list|map|set)\\b"

				}
			]
		}
	},
	"scopeName": "source.pss"
}